name: Build_oneplus_sm8750
on:
  schedule:
    - cron: '0 2,15 * * *'
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
        default: 'oneplus_ace5_pro'

      keep_original_settings:
        description: "✅ 保持原内核名称及构建时间"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ 自定义内核名称(可中文和emoji) - 仅在取消勾选'保持原设置'时有效"
        required: false
        default: ''
      
      custom_kernel_time:
        description: "⏰ 自定义构建时间(示例：Tue Dec 17 23:36:49 UTC 2024) - 仅在取消勾选'保持原设置'时有效"
        required: false
        default: ''
      
      enable_feature_x:
        description: "生成无KPM的AK3 - 取消则只有有KPM的AK3"
        required: false
        default: true
        type: boolean
        
      enable_feature_y:
        description: "启用lz4+zstd"
        required: false
        default: true
        type: boolean
        
      enable_feature_z:
        description: "添加风驰驱动"
        required: false
        default: true
        type: boolean
      
       


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Check disk space (检查磁盘空间)
        run: |
          echo "构建前磁盘空间："
          df -h
      
      - name: ⚙️ Set REPO_MANIFEST (设置对应机型配置文件)
        id: set_manifest
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac

      - name: ⚙️ Set KERNEL_TIME (设置构建时间)
        id: set_kernel_time
        run: |
          if [ "$KEEP_ORIGINAL" = "false" ] && [ -n "$CUSTOM_TIME" ]; then
            echo "使用自定义构建时间: $CUSTOM_TIME"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
          else
            case "$DEVICES_NAME" in
              oneplus_13 | oneplus_ace5_pro)
                echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_13t)
                echo 'KERNEL_TIME=FriApr 25 01:56:53 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro)
                echo 'KERNEL_TIME=Wed Dec 11 19:16:38 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_ace5_ultra)
                echo 'KERNEL_TIME=Fri Apr 18 19:35:07 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: ⚙️ Set device-specific CCACHE_DIR (设置对应机型Cceche路径)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git (设置下载账户)
        run: |
          git config --global user.name "SQMY-dor"
          git config --global user.email "2798005047@qq.com"

      - name: 🛠 Configure APT caching (配置APT缓存)
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages (缓存APT包)
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yaml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies & Init ccache (合并安装依赖和初始化ccache)
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          echo "✅ 依赖安装完成"
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache 已初始化，跳过"
            fi
          else
            echo "未安装 ccache，跳过"
          fi

      - name: 📥 Restore ccache (载入 ccache 缓存)
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: 📥 Install repo tool
        run: |
         curl -LSs https://storage.googleapis.com/git-repo-downloads/repo -o ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync (参考仓库 manifest)
        run: |
         mkdir -p kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/HanKuCha/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m JiuGeFaCai_oneplus_ace5_pro_v.xml
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: ⚙️ Set up SukiSU Ultra
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-1.5.8/kernel/setup.sh" | bash -s susfs-1.5.8
         cd ./KernelSU
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION
         sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: 🔧 Set up SUSFS & lz4k
        run: |
           cd kernel_workspace
           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
           git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
           cd kernel_platform
           cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
           cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
           cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
           cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
           cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
           cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
           cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
           cd ./common
           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
           sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
           patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
           cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
           patch -p1 -F 3 < syscall_hooks.patch
           echo "完成"

      - name: 🔧 Apply HMBird GKI patch
        run: |
          cd kernel_workspace/kernel_platform/common/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>
          static int __init hmbird_patch_init(void) {
            struct device_node *ver_np;
            const char *type;
            int ret;
            ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
            if (!ver_np) {
              pr_info("hmbird_patch: version_type node not found\n");
              return 0;
            }
            ret = of_property_read_string(ver_np, "type", &type);
            if (ret) {
              pr_info("hmbird_patch: type property not found\n");
              of_node_put(ver_np);
              return 0;
            }
            if (strcmp(type, "HMBIRD_OGKI")) {
              of_node_put(ver_np);
              return 0;
            }
            struct property *prop = of_find_property(ver_np, "type", NULL);
            if (prop) {
              struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
              if (!new_prop) {
                pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                of_node_put(ver_np);
                return 0;
              }
              memcpy(new_prop, prop, sizeof(*prop));
              new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
              if (!new_prop->value) {
                pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                kfree(new_prop);
                of_node_put(ver_np);
                return 0;
              }
              strcpy(new_prop->value, "HMBIRD_GKI");
              new_prop->length = strlen("HMBIRD_GKI") + 1;
              if (of_remove_property(ver_np, prop) != 0) {
                pr_info("hmbird_patch: of_remove_property failed\n");
                return 0;
              }
              if (of_add_property(ver_np, new_prop) !=0) {
                pr_info("hmbird_patch: of_add_property failed\n");
                return 0;
              }
              pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
            } else {
              pr_info("hmbird_patch: type property structure not found\n");
            }
            of_node_put(ver_np);
            return 0;
          }
          early_init_call(hmbird_patch_init);
          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("reigadegr");
          MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
          EOF
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          cd ../../../
          git add -A
          git commit -m "Add HMBird GKI patch" || true

      - name: 🔧 Apply lz4kd Patches
        if: ${{inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true

      - name: 🔧 Add SUSFS/BBR/压缩等配置
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LOCALVERSION_AUTO=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: 🔧 Add KPM 配置
        if: ${{inputs.enable_feature_x }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: 🔧 Add make name
        run: |
         cd kernel_workspace/kernel_platform
         sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
         sudo sed -i 's/-4k/${{ github.event.inputs.KERNEL_SUFFIX }}/g' ./common/arch/arm64/configs/gki_defconfig

      - name: 🔧 Add sched_ext
        if: ${{inputs.enable_feature_z }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  

      - name: 🔨 Build Kernel
        run: |
          export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.KERNEL_TIME }}"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          sudo apt install libelf-dev
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig all

      - name: 🔧 Apply Linux Patch
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image

      - name: 📦 Make AnyKernel3
        run: |
         git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1      
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/
         cd AnyKernel3
         zip -r ../SuKiSu_${{ env.KSUVER }}_oneplus_ace5_pro_bbr_nokpm.zip ./
         cd ..

      - name: 📤 Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
         name: SuKiSu_${{ env.KSUVER }}_oneplus_ace5_pro
         path: ./AnyKernel3/*

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.KSUVER }}"
          name: "SuKiSu ${{ env.KSUVER }} (oneplus_ace5_pro)"
          files: ./SuKiSu_${{ env.KSUVER }}_oneplus_ace5_pro_bbr_nokpm.zip
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Post-build disk check (构建后空间检查)
        run: |
          echo "构建后磁盘空间："
          df -h
